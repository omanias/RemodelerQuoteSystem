Transform the existing home services management application into a multi-tenant SaaS platform with proper data isolation and tenant-specific features.

Database Schema Updates:

sqlCopy// Add Company table
Company {
  id: uuid primary key
  name: string
  subdomain: string unique
  created_at: timestamp
  status: enum (ACTIVE, SUSPENDED, CANCELLED)
  subscription_tier: enum (BASIC, PRO, ENTERPRISE)
  subscription_status: enum (ACTIVE, PAST_DUE, CANCELLED)
  billing_email: string
  company_logo: string nullable
  company_settings: jsonb
  custom_domain: string nullable
  timezone: string
  date_format: string
  currency: string
}

// Add Subscription table
Subscription {
  id: uuid primary key
  company_id: uuid foreign key
  plan_id: string
  status: string
  current_period_start: timestamp
  current_period_end: timestamp
  cancel_at_period_end: boolean
  payment_method_id: string nullable
  billing_details: jsonb
}

// Modify existing tables to add company_id
ALTER TABLE "users" ADD COLUMN company_id uuid REFERENCES companies(id);
ALTER TABLE "quotes" ADD COLUMN company_id uuid REFERENCES companies(id);
ALTER TABLE "contacts" ADD COLUMN company_id uuid REFERENCES companies(id);
ALTER TABLE "products" ADD COLUMN company_id uuid REFERENCES companies(id);
ALTER TABLE "categories" ADD COLUMN company_id uuid REFERENCES companies(id);
ALTER TABLE "templates" ADD COLUMN company_id uuid REFERENCES companies(id);

Authentication & Middleware Updates:

typescriptCopy// Add tenant middleware
const tenantMiddleware = async (req, res, next) => {
  const subdomain = req.hostname.split('.')[0];
  const company = await db.query.companies.findFirst({
    where: eq(companies.subdomain, subdomain)
  });
  if (!company) return res.status(404).json({ error: 'Company not found' });
  req.companyId = company.id;
  next();
};

// Update auth middleware
const authMiddleware = async (req, res, next) => {
  // ... existing auth logic
  if (req.user.company_id !== req.companyId) {
    return res.status(403).json({ error: 'Invalid tenant access' });
  }
  next();
};

API Route Updates:


Add company_id filter to all queries
Implement subscription plan checks
Add rate limiting per tenant
Add usage tracking


Subscription Features:
Basic Plan:


Limited contacts (100)
Basic quote templates
Basic reporting

Pro Plan:

Unlimited contacts
Custom templates
Advanced reporting
API access
Custom fields

Enterprise Plan:

Everything in Pro
White labeling
Priority support
Custom domain
Advanced security features


Required New API Endpoints:

typescriptCopy// Company management
POST /api/companies - Create new company
GET /api/companies/:id - Get company details
PUT /api/companies/:id - Update company
DELETE /api/companies/:id - Delete company

// Subscription management
POST /api/subscriptions - Create subscription
PUT /api/subscriptions/:id - Update subscription
GET /api/subscriptions/:id/usage - Get usage metrics

Data Migration Strategy:

typescriptCopy// Migration script structure
async function migrateToMultiTenant() {
  // 1. Create default company
  // 2. Update existing records with company_id
  // 3. Add required indexes
  // 4. Verify data integrity
}

Frontend Updates:


Add company branding
Subscription management UI
Usage analytics
Company settings page
Plan feature limitations


Security Considerations:


Data isolation validation
Cross-tenant access prevention
Rate limiting per tenant
Resource usage monitoring
Audit logging

Implementation Steps:

Create new database tables
Update existing tables
Implement tenant middleware
Update API routes
Add subscription logic
Create company management
Update frontend
Test data isolation
Implement usage tracking
Add billing integration

The system should maintain:

Perfect data isolation
Scalable architecture
Easy tenant onboarding
Flexible subscription management
Proper resource allocation